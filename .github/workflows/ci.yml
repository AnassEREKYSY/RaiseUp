name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_CLIENT: ${{ github.repository_owner }}/raiseup-client
  IMAGE_SERVER: ${{ github.repository_owner }}/raiseup-server

jobs:
  unit_and_load_tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        ports: [ "5432:5432" ]
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        options: >-
          --health-cmd "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      - name: Install server deps
        working-directory: server
        run: npm ci
      - name: Build server
        working-directory: server
        run: npx tsc -p tsconfig.build.json || npx tsc
      - name: Unit tests with coverage
        working-directory: server
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ vars.DATABASE_URL }}
        run: npx jest --ci --coverage --runInBand --config ./jest.config.ts
      - name: Upload unit test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage
          if-no-files-found: warn
          retention-days: 14
      - name: Load test (Artillery)
        working-directory: server
        env:
          DATABASE_URL: ${{ vars.DATABASE_URL }}
        run: |
          if [ -f "artillery.yml" ]; then npx artillery run artillery.yml -o load-results.json; fi
          if [ -d "artillery" ]; then npx artillery run artillery/*.yml -o load-results.json; fi
          if [ -f "load-results.json" ]; then npx artillery report load-results.json -o load-report.html; fi
      - name: Upload load test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artillery-report
          path: |
            server/load-results.json
            server/load-report.html
          if-no-files-found: warn
          retention-days: 14

  e2e_tests:
    runs-on: ubuntu-latest
    needs: unit_and_load_tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      - name: Install client deps
        working-directory: client
        run: npm ci
      - name: Build client (CSR-only CI config)
        working-directory: client
        run: npx ng build --configuration ci
      - name: Install Playwright browsers
        working-directory: client
        run: npx playwright install --with-deps
      - name: Start static server
        working-directory: client
        run: |
          npx -y serve -s dist/client/browser -l 4200 & echo $! > /tmp/web.pid
      - name: Wait for server
        run: npx -y wait-on http://localhost:4200
      - name: Run E2E tests (HTML report)
        working-directory: client
        env:
          CI: true
        run: npx playwright test -c e2e/playwright.config.ts --reporter=html
      - name: Stop static server
        if: always()
        run: kill $(cat /tmp/web.pid) || true
      - name: Upload E2E report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: client/playwright-report
          if-no-files-found: warn
          retention-days: 14

  docker_build_push:
    runs-on: ubuntu-latest
    needs: [unit_and_load_tests, e2e_tests]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set image tags
        id: meta
        run: |
          SHA=${GITHUB_SHA::7}
          echo "sha=${SHA}" >> $GITHUB_OUTPUT
      - uses: docker/setup-buildx-action@v3
      - name: Build & push SERVER image
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_SERVER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_SERVER }}:${{ steps.meta.outputs.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build & push CLIENT image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_CLIENT }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_CLIENT }}:${{ steps.meta.outputs.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
